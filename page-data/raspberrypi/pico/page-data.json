{"componentChunkName":"component---src-templates-blog-post-js","path":"/raspberrypi/pico/","result":{"data":{"site":{"siteMetadata":{"title":"Tectac","author":"David Briggs"}},"markdownRemark":{"id":"e7a53543-c329-5794-9991-628ea3ca09b4","excerpt":"The Original idea for this project was to emulate the simple tetris programs found for Micro:bit. (This probably would have been better implemented using picoâ€¦","html":"<p>The Original idea for this project was to emulate the simple tetris programs found for <a href=\"https://blog.withcode.uk/2016/12/microbit-tetris-in-python/\">Micro:bit</a>. (<a href=\"https://shop.pimoroni.com/collections/pico\">This probably would have been better implemented using pico display pack</a> and learn something about the Raspberry pi pico board. I knew I needed a pair of buttons; a screen and micro controller. I could then split the programming into 3 tasks:</p>\n<ul>\n<li>Buttons and events</li>\n<li>Screen and graphic rendering</li>\n<li>Game logic and loops</li>\n</ul>\n<p>As a neophyte with limited electronics, MicroPython and raspberry pi pico knowledge I started off following <a href=\"https://www.raspberrypi.org/blog/new-book-get-started-with-micropython-on-raspberry-pi-pico/\">Get started with MicroPython on raspberry pi pico</a>. I thought this would give pointers for the code needed to control both the buttons and screen.</p>\n<h2>Buttons bounce (or debounce) who new?</h2>\n<p>Well, everybody but me apparently. Following the text for IRQ buttons I wired buttons and started writing code examples. I immediately found problems, the examples did not work as expected with LEDs either not lighting or staying on. There were three issues:</p>\n<ol>\n<li><a href=\"https://hackspace.raspberrypi.org/downloads/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBcW9SIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--6dc8e90235a820703b1ce14d62cf4999c2e02c49/210226%20Get%20Started%20with%20Micropython%20Errata.pdf\">Errata in the book</a></li>\n<li><a href=\"https://micropython.org/download/rp2-pico/\">Firmware for the board</a></li>\n<li>buttons bouncing. The former were fixed by making sure all a pull_down constant was included in all button initiation statements.</li>\n</ol>\n<p>Pin(15, Pin.OUT, Pin.PULL_DOWN)\nThe latter button debounce was bit more involved. Button bouncing results in an oscillation of voltage caused by button making contacts connecting several times during a press or release of button. The fix is either smoothing circuity or more usually timing lags or looping counts in the program. An elegant solutionand description included in <a href=\"https://learn.adafruit.com/debouncer-library-python-circuitpython-buttons-sensors\">Adafruit debouce libraires</a> however this is circuit python and had a few more decencies to unpick than the this weekend coding project would allow. So I plumped for the time delay implemented in the buttons class.</p>\n<h3>ST7735 screen</h3>\n<p>For this project used the <a href=\"https://www.amazon.co.uk/gp/product/B07N6FQ5XW/ref=ppx_yo_dt_b_asin_title_o06_s01?ie=UTF8&#x26;psc=1\">MakerHawk TFT LCD Screen 1.8inch Graphic Color Screen</a></p>\n<p>Originally I naively though I could just pick the SPI examples in <a href=\"https://www.raspberrypi.org/blog/new-book-get-started-with-micropython-on-raspberry-pi-pico/\">Get started with MicroPython on raspberry pi pico</a>, however nothing happened. Looking at C code supplied with the ST7735 together with,at least to me, the obtuse documentation on the screen itself two thing were apparent: You need a font library file and pins other than SPI pins to switch between command and data sent between the pico board to the screen. A search for with google exposed elegant libraries from Adafruit but these were circuit python with a string of dependencies that would need conversion  I discovered as I chased through the libraries. In this case I picked the libraries of <a href=\"https://github.com/boochow/MicroPython-ST7735\">boochow</a> and <a href=\"https://github.com/GuyCarver/MicroPython/blob/master/lib/\">GuyCarver</a> as this would need a small amount of hacking to include the machine pins modules. an issue still remains with this driver the init functions, I used initg since it mostly worked. but it still needs some hacking to remove a a 1 pixel screen shift around the edge of the screen.</p>\n<h3>Game logic and loop</h3>\n<p>Although I originally though micro:bit would be good fit game logic I quickly realised that several articles on the <a href=\"https://levelup.gitconnected.com/writing-tetris-in-python-2a16bddb5318\">pygame module and tetris</a> were a much better fit. The main code adaption was to replace the pygame libraries with those of the ST7735 used to render the blocks and text.</p>\n<h2>Parts</h2>\n<ul>\n<li>LED x2</li>\n<li>Buttons x 2</li>\n<li>330K resistor ohm x 2</li>\n<li>Screen ST7735</li>\n<li>Bread board x 1</li>\n<li>Raspberry pi pico x 1</li>\n</ul>\n<h2>Pinouts</h2>\n<h3><em>Screen pinout</em></h3>\n<table>\n<thead>\n<tr>\n<th>ST7735 Driver</th>\n<th>Pico</th>\n<th>ST7735 Board (LDC)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SPI_SCK = 10 # sck</td>\n<td>SPI1_SCK (GP10)</td>\n<td>SCK</td>\n</tr>\n<tr>\n<td>SPI_SDO = 11 # mosi(Controller SDO)</td>\n<td>SPI_TX   (GP11)</td>\n<td>SDA</td>\n</tr>\n<tr>\n<td>SPI_DC = 3  # aDC</td>\n<td>GP3</td>\n<td>DC</td>\n</tr>\n<tr>\n<td>SPI_RS = 2  # aReset</td>\n<td>GP2</td>\n<td>RS</td>\n</tr>\n<tr>\n<td>SPI_CS = 4  # ACS</td>\n<td>GP4</td>\n<td>CS</td>\n</tr>\n<tr>\n<td># VCC</td>\n<td>VCC  GP36</td>\n<td>VCC</td>\n</tr>\n<tr>\n<td># GND</td>\n<td>GND  GP38</td>\n<td>GND</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3><em>Buttons and LED GPIO</em></h3>\n<ul>\n<li>LED1 = GP15 Via resistor on (+ve) long leg , short leg (-ve) to ground rail and pin GP38</li>\n<li>LED2 = GP18 via resistor on (+ve) long leg  ,short leg (-ve) to ground rail and pin GP38</li>\n<li>BTN_LEFT = GP19 ,  +ve rail GP36</li>\n<li>BTN_RIGHT =GP14 ,  +ve rail GP36</li>\n</ul>\n<h2>Resources</h2>\n<p>SEE: <a href=\"https://datasheets.raspberrypi.org/pico/Pico-R3-A4-Pinout.pdf\">https://datasheets.raspberrypi.org/pico/Pico-R3-A4-Pinout.pdf</a>\nSEE <a href=\"https://www.oshwa.org/a-resolution-to-redefine-spi-signal-names/\">https://www.oshwa.org/a-resolution-to-redefine-spi-signal-names/</a></p>\n<p><a href=\"https://www.pygame.org/docs/tut/tom_games2.html\">https://www.pygame.org/docs/tut/tom_games2.html</a>\n<a href=\"https://www.techwithtim.net/tutorials/game-development-with-python/tetris-pygame/tutorial-2/\">https://www.techwithtim.net/tutorials/game-development-with-python/tetris-pygame/tutorial-2/</a></p>\n<p>&#x3C;<a href=\"https://www.101computing.net/bbc-microbit-tetris-game/\">https://www.101computing.net/bbc-microbit-tetris-game/</a> <a href=\"https://blog.withcode.uk/2016/12microbit-tetris-in-python/%3E\">https://blog.withcode.uk/2016/12microbit-tetris-in-python/></a>\n<a href=\"https://shop.pimoroni.com/products/get-started-with-micropython-on-raspberry-pi-pico\">https://shop.pimoroni.com/products/get-started-with-micropython-on-raspberry-pi-pico</a>\n<a href=\"https://www.amazon.co.uk/gp/product/B07N6FQ5XW/ref=ppx_yo_dt_b_asin_title_o06_s01?ie=UTF8&#x26;psc=1\">https://www.amazon.co.uk/gp/product/B07N6FQ5XW/ref=ppx_yo_dt_b_asin_title_o06_s01?ie=UTF8&#x26;psc=1</a>\n<a href=\"https://drive.google.com/drive/folders/1TnI11iVNIAmHYrTuW_EMTs_RG-VNEeyI\">https://drive.google.com/drive/folders/1TnI11iVNIAmHYrTuW_EMTs_RG-VNEeyI</a></p>","frontmatter":{"title":"Raspberry Pi Pico -  Tetris using st7735 and micro python","date":"2021, Mar 11","tags":["ST7735","Raspberry Pi Pico"],"img":null}}},"pageContext":{"slug":"/raspberrypi/pico/","previous":{"fields":{"slug":"/raspberrypi/raspberrypipico/"},"frontmatter":{"title":"Raspberry pico tetris using st7735 and micro python","tags":["ST7735","Raspberry Pi Pico"],"img":null}},"next":{"fields":{"slug":"/3dprinting/"},"frontmatter":{"title":"3d printer","tags":["3d printer"],"img":null}}}},"staticQueryHashes":["2478211480","63159454"]}