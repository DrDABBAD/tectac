{"componentChunkName":"component---src-templates-blog-post-js","path":"/iot/react/","result":{"data":{"site":{"siteMetadata":{"title":"Tectac","author":"David Briggs"}},"markdownRemark":{"id":"ade9c145-0021-5b29-ac38-b0b94842031b","excerpt":"React Dev tools see (https://github.com/facebook/react-devtools) mae sure you are the v3 (15/10/2021) branch\nfind pre packed links for extensions represent the…","html":"<h1>React</h1>\n<h2>Dev tools</h2>\n<p>see (<a href=\"https://github.com/facebook/react-devtools\">https://github.com/facebook/react-devtools</a>) mae sure you are the v3 (15/10/2021) branch\nfind pre packed links for extensions represent the current stable release.</p>\n<p>Chrome extension\nFirefox extension\nStandalone app (Safari, React Native, etc)</p>\n<p>Page with react components will show the  react logo un-greyed (weird molecule thing).</p>\n<h3>Install Node</h3>\n<p>Check for installation\nnode -v\nif missing\n[goto node.js website] (<a href=\"http://nodejs.org/\">http://nodejs.org/</a>) and install\nnode and npm the node package manager.</p>\n<h2>Starting a project</h2>\n<p>The key commands are:</p>\n<div class=\"gatsby-highlight\" data-language=\"npm\"><pre class=\"language-npm\"><code class=\"language-npm\">npm init -y\n\nnpm install package-name\n\nnpm remove package-name</code></pre></div>\n<p>Alternatively use yarn</p>\n<p>Install yarn globally</p>\n<div class=\"gatsby-highlight\" data-language=\"yarn\"><pre class=\"language-yarn\"><code class=\"language-yarn\">npm install -g yarn\n\n\nIs there no yarn init package ?\nTo install  and remove package\n\nyarn add package-name\n\nyarn remove package-name</code></pre></div>\n<p>finally to run yor project</p>\n<p>npm run start</p>\n<h2>git and git hub tasks</h2>\n<ul>\n<li>Create a new repository on GitHub.</li>\n</ul>\n<p>Open your terminal.</p>\n<ul>\n<li>Initialize the local directory as a Git repository:</li>\n</ul>\n<p>git init    WHAT ABOUT MAIN</p>\n<ul>\n<li>Add the files to your new local repository:</li>\n</ul>\n<p>git add .</p>\n<ul>\n<li>Commit the files that you’ve staged in your local repository:</li>\n</ul>\n<p>git commit -m \"initial commit\"</p>\n<ul>\n<li>Copy the HTTPS URL of your newly created repo</li>\n</ul>\n<p>*In the Command prompt, add the URL for the remote repository where your local repository will be pushed.</p>\n<p>git remote add origin remote repository URL</p>\n<ul>\n<li>then remote -v</li>\n</ul>\n<p>git remote -v</p>\n<ul>\n<li>Push the changes in your local repository to GitHub using the following command :</li>\n</ul>\n<p>git push -f origin master</p>\n<h2>git deployment to github pages</h2>\n<p>npm install gh-pages — save-dev</p>\n<p>After that, go to your package.json file in your root directory</p>\n<p>add the homepage property at the top level.</p>\n<p>\"homepage\": \"<a href=\"https://username.github.io/repository-name%22\">https://username.github.io/repository-name\"</a>,</p>\n<p>add those two lines in the scripts property:</p>\n<p>\"predeploy\": \"npm run build\",\n\"deploy\": \"gh-pages -d build\"</p>\n<p>To deploy project</p>\n<p>npm run deploy</p>\n<h2>Core javascript needed for react</h2>\n<h3>const and variables</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pizza <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  # cant be overrwritten\n<span class=\"token keyword\">var</span> pizza2 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\npizza2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  # ehere <span class=\"token keyword\">as</span> variables can\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\n##  Lexical variable scope\n\nWhat is lexical scope\n\nvar and let are used to set variables.  (In old javascript only var )\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\n<span class=\"token keyword\">var</span> topic <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> topic <span class=\"token operator\">=</span> <span class=\"token string\">\"React\"</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"block\"</span><span class=\"token punctuation\">,</span> topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// React</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"global\"</span><span class=\"token punctuation\">,</span> topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// JavaScript</span>\n<span class=\"token keyword\">with</span> <span class=\"token keyword\">let</span> the value <span class=\"token keyword\">of</span> topic is not reset outside <span class=\"token keyword\">of</span> the block<span class=\"token punctuation\">.</span> <span class=\"token keyword\">this</span> is not the <span class=\"token keyword\">case</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">var</span> is substituted <span class=\"token keyword\">for</span> the above code<span class=\"token punctuation\">.</span> <span class=\"token keyword\">var</span>  <span class=\"token keyword\">from</span>  inside the curly braket will reset the global value <span class=\"token keyword\">of</span> topic\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\nThis is the same for  loop counters\nwith for loops\n\n## concatenation\n\nTraditional string concatenation uses plus signs to compose a string using variable values and strings:\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lastName <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> middleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\nWith a template, we can create one string and insert the variable values by surrounding them with </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>middleName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`\nTemplates are better because the honour white space\n\n\n### Function Declarations\n\n<span class=\"token string\">''</span>'js\n <span class=\"token operator\">**</span> Declare\n<span class=\"token keyword\">function</span> <span class=\"token function\">logC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wonderful!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">**</span> Invoke\n<span class=\"token function\">logC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">''</span>'\n\n### Function Expressions\n This just involves creating the <span class=\"token keyword\">function</span> <span class=\"token keyword\">as</span> a variable<span class=\"token operator\">:</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logC</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Awful\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">logC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">''</span>'\n\nFunction declarations are hoisted and <span class=\"token keyword\">function</span> expressions are not<span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">**</span>What does hoisting mean <span class=\"token operator\">?</span><span class=\"token operator\">**</span>\nHoisting is JavaScript's <span class=\"token keyword\">default</span> behaviour <span class=\"token keyword\">of</span> moving declarations to the top whether they are variables or <span class=\"token keyword\">function</span> expressions<span class=\"token punctuation\">.</span>\nYou can invoke a <span class=\"token keyword\">function</span> before you write a <span class=\"token keyword\">function</span> declaration<span class=\"token punctuation\">.</span> You cannot invoke a <span class=\"token keyword\">function</span> created by a <span class=\"token keyword\">function</span> expression<span class=\"token punctuation\">.</span>\n\n### Arrow functions <span class=\"token keyword\">in</span> javascript\n\n## resources\n\nlearning<span class=\"token operator\">-</span><span class=\"token function\">reat</span><span class=\"token punctuation\">(</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>moonhighway<span class=\"token operator\">/</span>learning<span class=\"token operator\">-</span>react<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"","date":null,"tags":null,"img":null}}},"pageContext":{"slug":"/iot/react/","previous":{"fields":{"slug":"/iot/wtfarduninoide/"},"frontmatter":{"title":"","tags":null,"img":null}},"next":{"fields":{"slug":"/iot/ota/"},"frontmatter":{"title":"","tags":null,"img":null}}}},"staticQueryHashes":["2478211480","63159454"]}