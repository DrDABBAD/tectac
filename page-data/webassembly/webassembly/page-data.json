{"componentChunkName":"component---src-templates-blog-post-js","path":"/webassembly/webassembly/","result":{"data":{"site":{"siteMetadata":{"title":"Tectac","author":"David Briggs"}},"markdownRemark":{"id":"81351022-a216-5377-a392-ed17e0bbe1c0","excerpt":"WebAssembly WebAssembly is a compact bytecode format optimized for fast download and maximum execution speed.  DOTNET code runs inside the context ofâ€¦","html":"<h2>WebAssembly</h2>\n<p>WebAssembly is a compact bytecode format optimized for fast download and maximum execution speed.  DOTNET code runs inside the context of WebAssembly. \"a .NET\" and blazor is the single page app that sits on the the dotnet.</p>\n<h2>Hosting deployment</h2>\n<p>With the <a href=\"xref:blazor/hosting-models#blazor-webassembly\">Blazor WebAssembly hosting model</a>:</p>\n<p>Two things  happen:\nFirst a Blazor app and  its dependencies, such as .NET runtime are downloaded to the browser in parallel.\nThe the blazor  app is executed directly on the browser UI thread.</p>\n<p>The deployment of the app can happen in two ways.</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/aspnet/core/blazor/host-and-deploy/webassembly?view=aspnetcore-5.0#hosted-deployment-with-aspnet-core\">Hosted deployment with ASP.NET Core</a> ,where the Blazor app is served by an ASP.NET Core app.</li>\n<li><a href=\"https://docs.microsoft.com/en-us/aspnet/core/blazor/host-and-deploy/webassembly?view=aspnetcore-5.0#standalone-deployment\">Standalone deployment</a> The Blazor app is placed on a static hosting web server or service such as Azure App Service.</li>\n</ul>\n<h2>Compression</h2>\n<p>When a Blazor WebAssembly app is published, the output is statically compressed during publish to reduce the app's size and remove the overhead for runtime compression. The following compression algorithms are used:</p>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc7932\">Brotli</a> (highest level)</li>\n<li><a href=\"https://tools.ietf.org/html/rfc1952\">Gzip</a></li>\n</ul>\n<p>Blazor relies on the host to the serve the appropriate compressed files. When using an ASP.NET Core hosted project, the host project is capable of performing content negotiation and serving the statically-compressed files. When hosting a Blazor WebAssembly standalone app, additional work might be required to ensure that statically-compressed files are served:</p>\n<ul>\n<li>For IIS <code class=\"language-text\">web.config</code> compression configuration, see the <a href=\"#brotli-and-gzip-compression\">IIS: Brotli and Gzip compression</a> section.</li>\n<li>\n<p>When hosting on static hosting solutions that don't support statically-compressed file content negotiation, such as GitHub Pages, consider configuring the app to fetch and decode Brotli compressed files:</p>\n<ul>\n<li>Obtain the JavaScript Brotli decoder from the <a href=\"https://github.com/google/brotli\">google/brotli GitHub repository</a>. The decoder file is named <code class=\"language-text\">decode.js</code> and found in the repository's <a href=\"https://github.com/google/brotli/tree/master/js\"><code class=\"language-text\">js</code> folder</a>.</li>\n</ul>\n<blockquote>\n<p>[!NOTE]\nA regression is present in the minified version of the <code class=\"language-text\">decode.js</code> script (<code class=\"language-text\">decode.min.js</code>) in the <a href=\"https://github.com/google/brotli\">google/brotli GitHub repository</a>. Until the issue <a href=\"https://github.com/google/brotli/issues/881\">TypeError in decode.min.js (google/brotli #881)</a> is resolved, take one of the following approaches:</p>\n<ul>\n<li>Temporarily use the unminified version of the script.</li>\n<li>Automatically minify the script at build-time with a third-party minification tool compatible with ASP.NET Core.</li>\n<li>Use the <a href=\"https://www.npmjs.com/package/brotli\">npm package</a>.</li>\n</ul>\n<p>The example code in this section uses the <strong>unminified</strong> version of the script (<code class=\"language-text\">decode.js</code>).</p>\n</blockquote>\n<ul>\n<li>Update the app to use the decoder. Change the markup inside the closing <code class=\"language-text\">&lt;body&gt;</code> tag in <code class=\"language-text\">wwwroot/index.html</code> to the following:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>decode.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_framework/blazor.webassembly.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autostart</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  Blazor<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">loadBootResource</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> defaultUri<span class=\"token punctuation\">,</span> integrity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">'dotnetjs'</span> <span class=\"token operator\">&amp;&amp;</span> location<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">!==</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>defaultUri <span class=\"token operator\">+</span> <span class=\"token string\">'.br'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> cache<span class=\"token operator\">:</span> <span class=\"token string\">'no-cache'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">const</span> originalResponseBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> originalResponseArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Int8Array</span><span class=\"token punctuation\">(</span>originalResponseBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> decompressedResponseArray <span class=\"token operator\">=</span> <span class=\"token function\">BrotliDecode</span><span class=\"token punctuation\">(</span>originalResponseArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> contentType <span class=\"token operator\">=</span> type <span class=\"token operator\">===</span>\n            <span class=\"token string\">'dotnetwasm'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'application/wasm'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'application/octet-stream'</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>decompressedResponseArray<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'content-type'</span><span class=\"token operator\">:</span> contentType <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n</ul>\n<p>To disable compression, add the <code class=\"language-text\">BlazorEnableCompression</code> MSBuild property to the app's project file and set the value to <code class=\"language-text\">false</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BlazorEnableCompression</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>BlazorEnableCompression</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The <code class=\"language-text\">BlazorEnableCompression</code> property can be passed to the <a href=\"/dotnet/core/tools/dotnet-publish\"><code class=\"language-text\">dotnet publish</code></a> command with the following syntax in a command shell:</p>\n<div class=\"gatsby-highlight\" data-language=\"dotnetcli\"><pre class=\"language-dotnetcli\"><code class=\"language-dotnetcli\">dotnet publish -p:BlazorEnableCompression=false</code></pre></div>\n<h2>Rewrite URLs for correct routing</h2>\n<p>Routing requests for page components in a Blazor WebAssembly app isn't as straightforward as routing requests in a Blazor Server, hosted app. Consider a Blazor WebAssembly app with two components:</p>\n<ul>\n<li><code class=\"language-text\">Main.razor</code>: Loads at the root of the app and contains a link to the <code class=\"language-text\">About</code> component (<code class=\"language-text\">href=&quot;About&quot;</code>).</li>\n<li><code class=\"language-text\">About.razor</code>: <code class=\"language-text\">About</code> component.</li>\n</ul>\n<p>When the app's default document is requested using the browser's address bar (for example, <code class=\"language-text\">https://www.contoso.com/</code>):</p>\n<ol>\n<li>The browser makes a request.</li>\n<li>The default page is returned, which is usually <code class=\"language-text\">index.html</code>.</li>\n<li><code class=\"language-text\">index.html</code> bootstraps the app.</li>\n<li>Blazor's router loads, and the Razor <code class=\"language-text\">Main</code> component is rendered.</li>\n</ol>\n<p>In the Main page, selecting the link to the <code class=\"language-text\">About</code> component works on the client because the Blazor router stops the browser from making a request on the Internet to <code class=\"language-text\">www.contoso.com</code> for <code class=\"language-text\">About</code> and serves the rendered <code class=\"language-text\">About</code> component itself. All of the requests for internal endpoints <em>within the Blazor WebAssembly app</em> work the same way: Requests don't trigger browser-based requests to server-hosted resources on the Internet. The router handles the requests internally.</p>\n<p>If a request is made using the browser's address bar for <code class=\"language-text\">www.contoso.com/About</code>, the request fails. No such resource exists on the app's Internet host, so a <em>404 - Not Found</em> response is returned.</p>\n<p>Because browsers make requests to Internet-based hosts for client-side pages, web servers and hosting services must rewrite all requests for resources not physically on the server to the <code class=\"language-text\">index.html</code> page. When <code class=\"language-text\">index.html</code> is returned, the app's Blazor router takes over and responds with the correct resource.</p>\n<p>When deploying to an IIS server, you can use the URL Rewrite Module with the app's published <code class=\"language-text\">web.config</code> file. For more information, see the <a href=\"#iis\">IIS</a> section.</p>\n<h2>Hosted deployment with ASP.NET Core</h2>\n<p>A <em>hosted deployment</em> serves the Blazor WebAssembly app to browsers from an <a href=\"xref:index\">ASP.NET Core app</a> that runs on a web server.</p>\n<p>The client Blazor WebAssembly app is published into the <code class=\"language-text\">/bin/Release/{TARGET FRAMEWORK}/publish/wwwroot</code> folder of the server app, along with any other static web assets of the server app. The two apps are deployed together. A web server that is capable of hosting an ASP.NET Core app is required. For a hosted deployment, Visual Studio includes the <strong>Blazor WebAssembly App</strong> project template (<code class=\"language-text\">blazorwasm</code> template when using the <a href=\"/dotnet/core/tools/dotnet-new\"><code class=\"language-text\">dotnet new</code></a> command) with the <strong><code class=\"language-text\">Hosted</code></strong> option selected (<code class=\"language-text\">-ho|--hosted</code> when using the <code class=\"language-text\">dotnet new</code> command).</p>\n<p>For more information, see the following articles:</p>\n<ul>\n<li>ASP.NET Core app hosting and deployment: &#x3C;xref:host-and-deploy/index></li>\n<li>Deployment to Azure App Service: &#x3C;xref:tutorials/publish-to-azure-webapp-using-vs></li>\n<li>Blazor project templates: &#x3C;xref:blazor/project-structure></li>\n</ul>\n<h2>Hosted deployment with multiple Blazor WebAssembly apps</h2>\n<h3>App configuration</h3>\n<p>Hosted Blazor solutions can serve multiple Blazor WebAssembly apps.</p>\n<blockquote>\n<p>[!NOTE]\nThe example in this section references the use of a Visual Studio <em>solution</em>, but the use of Visual Studio and a Visual Studio solution isn't required for multiple client apps to work in a hosted Blazor WebAssembly apps scenario. If you aren't using Visual Studio, ignore the <code class=\"language-text\">{SOLUTION NAME}.sln</code> file and any other files created for Visual Studio.</p>\n</blockquote>\n<p>In the following example:</p>\n<ul>\n<li>The initial (first) client app is the default client project of a solution created from the Blazor WebAssembly project template. The first client app is accessible in a browser from the URL <code class=\"language-text\">/FirstApp</code> on either port 5001 or with a host of <code class=\"language-text\">firstapp.com</code>.</li>\n<li>A second client app is added to the solution, <code class=\"language-text\">SecondBlazorApp.Client</code>. The second client app is accessible in a browser from the the URL <code class=\"language-text\">/SecondApp</code> on either port 5002 or with a host of <code class=\"language-text\">secondapp.com</code>.</li>\n</ul>\n<p>Use an existing hosted Blazor solution or create a new solution from the Blazor Hosted project template:</p>\n<ul>\n<li>\n<p>In the client app's project file, add a <code class=\"language-text\">&lt;StaticWebAssetBasePath&gt;</code> property to the <code class=\"language-text\">&lt;PropertyGroup&gt;</code> with a value of <code class=\"language-text\">FirstApp</code> to set the base path for the project's static assets:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StaticWebAssetBasePath</span><span class=\"token punctuation\">></span></span>FirstApp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StaticWebAssetBasePath</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>\n<p>Add a second client app to the solution:</p>\n<ul>\n<li>Add a folder named <code class=\"language-text\">SecondClient</code> to the solution's folder. The solution folder created from the project template contains the following solution file and folders after the <code class=\"language-text\">SecondClient</code> folder is added:</li>\n<li><code class=\"language-text\">Client</code> (folder)</li>\n<li><code class=\"language-text\">SecondClient</code> (folder)</li>\n<li><code class=\"language-text\">Server</code> (folder)</li>\n<li><code class=\"language-text\">Shared</code> (folder)</li>\n<li><code class=\"language-text\">{SOLUTION NAME}.sln</code> (file)</li>\n</ul>\n<p>The placeholder <code class=\"language-text\">{SOLUTION NAME}</code> is the solution's name.</p>\n<ul>\n<li>Create a Blazor WebAssembly app named <code class=\"language-text\">SecondBlazorApp.Client</code> in the <code class=\"language-text\">SecondClient</code> folder from the Blazor WebAssembly project template.</li>\n<li>In the <code class=\"language-text\">SecondBlazorApp.Client</code> app's project file:</li>\n<li>\n<p>Add a <code class=\"language-text\">&lt;StaticWebAssetBasePath&gt;</code> property to the <code class=\"language-text\">&lt;PropertyGroup&gt;</code> with a value of <code class=\"language-text\">SecondApp</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StaticWebAssetBasePath</span><span class=\"token punctuation\">></span></span>SecondApp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StaticWebAssetBasePath</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>\n<p>Add a project reference to the <code class=\"language-text\">Shared</code> project:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\Shared\\{SOLUTION NAME}.Shared.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The placeholder <code class=\"language-text\">{SOLUTION NAME}</code> is the solution's name.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>In the server app's project file, create a project reference for the added <code class=\"language-text\">SecondBlazorApp.Client</code> client app:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\Client\\{SOLUTION NAME}.Client.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\SecondClient\\SecondBlazorApp.Client.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\Shared\\{SOLUTION NAME}.Shared.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The placeholder <code class=\"language-text\">{SOLUTION NAME}</code> is the solution's name.</p>\n</li>\n<li>\n<p>In the server app's <code class=\"language-text\">Properties/launchSettings.json</code> file, configure the <code class=\"language-text\">applicationUrl</code> of the Kestrel profile (<code class=\"language-text\">{SOLUTION NAME}.Server</code>) to access the client apps at ports 5001 and 5002:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"applicationUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://localhost:5001;https://localhost:5002\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n</li>\n<li>\n<p>In the server app's <code class=\"language-text\">Startup.Configure</code> method (<code class=\"language-text\">Startup.cs</code>), remove the following lines, which appear after the call to &#x3C;xref:Microsoft.AspNetCore.Builder.HttpsPolicyBuilderExtensions.UseHttpsRedirection%2A>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">UseBlazorFrameworkFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseRouting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseEndpoints</span><span class=\"token punctuation\">(</span>endpoints <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n  endpoints<span class=\"token punctuation\">.</span><span class=\"token function\">MapRazorPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  endpoints<span class=\"token punctuation\">.</span><span class=\"token function\">MapControllers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  endpoints<span class=\"token punctuation\">.</span><span class=\"token function\">MapFallbackToFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Add middleware that maps requests to the client apps. The following example configures the middleware to run when:</p>\n<ul>\n<li>The request port is either 5001 for the original client app or 5002 for the added client app.</li>\n<li>The request host is either <code class=\"language-text\">firstapp.com</code> for the original client app or <code class=\"language-text\">secondapp.com</code> for the added client app.</li>\n</ul>\n<blockquote>\n<p>[!NOTE]\nThe example shown in this section requires additional configuration for:</p>\n<ul>\n<li>Accessing the apps at the example host domains, <code class=\"language-text\">firstapp.com</code> and <code class=\"language-text\">secondapp.com</code>.</li>\n<li>Certificates for the client apps to enable TLS security (HTTPS).</li>\n</ul>\n<p>The required configuration is beyond the scope of this article and depends on how the solution is hosted. For more information see the <a href=\"xref:host-and-deploy/index\">Host and deploy articles</a>.</p>\n</blockquote>\n<p>Place the following code where the lines were removed earlier:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">MapWhen</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Host<span class=\"token punctuation\">.</span>Port <span class=\"token operator\">==</span> <span class=\"token number\">5001</span> <span class=\"token operator\">||</span>\n  ctx<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Host<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstapp.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> first <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n  first<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> nxt<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">{</span>\n      ctx<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Path <span class=\"token operator\">=</span> <span class=\"token string\">\"/FirstApp\"</span> <span class=\"token operator\">+</span> ctx<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">nxt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  first<span class=\"token punctuation\">.</span><span class=\"token function\">UseBlazorFrameworkFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/FirstApp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  first<span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  first<span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/FirstApp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  first<span class=\"token punctuation\">.</span><span class=\"token function\">UseRouting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  first<span class=\"token punctuation\">.</span><span class=\"token function\">UseEndpoints</span><span class=\"token punctuation\">(</span>endpoints <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">{</span>\n      endpoints<span class=\"token punctuation\">.</span><span class=\"token function\">MapControllers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      endpoints<span class=\"token punctuation\">.</span><span class=\"token function\">MapFallbackToFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/FirstApp/{*path:nonfile}\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"FirstApp/index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapWhen</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Host<span class=\"token punctuation\">.</span>Port <span class=\"token operator\">==</span> <span class=\"token number\">5002</span> <span class=\"token operator\">||</span>\n  ctx<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Host<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secondapp.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> second <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n  second<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> nxt<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">{</span>\n      ctx<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Path <span class=\"token operator\">=</span> <span class=\"token string\">\"/SecondApp\"</span> <span class=\"token operator\">+</span> ctx<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">nxt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  second<span class=\"token punctuation\">.</span><span class=\"token function\">UseBlazorFrameworkFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/SecondApp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  second<span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  second<span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/SecondApp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  second<span class=\"token punctuation\">.</span><span class=\"token function\">UseRouting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  second<span class=\"token punctuation\">.</span><span class=\"token function\">UseEndpoints</span><span class=\"token punctuation\">(</span>endpoints <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">{</span>\n      endpoints<span class=\"token punctuation\">.</span><span class=\"token function\">MapControllers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      endpoints<span class=\"token punctuation\">.</span><span class=\"token function\">MapFallbackToFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/SecondApp/{*path:nonfile}\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"SecondApp/index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>In the server app's weather forecast controller (<code class=\"language-text\">Controllers/WeatherForecastController.cs</code>), replace the existing route (<code class=\"language-text\">[Route(&quot;[controller]&quot;)]</code>) to <code class=\"language-text\">WeatherForecastController</code> with the following routes:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Route</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"FirstApp/[controller]\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Route</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"SecondApp/[controller]\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>The middleware added to the server app's <code class=\"language-text\">Startup.Configure</code> method earlier modifies incoming requests to <code class=\"language-text\">/WeatherForecast</code> to either <code class=\"language-text\">/FirstApp/WeatherForecast</code> or <code class=\"language-text\">/SecondApp/WeatherForecast</code> depending on the port (5001/5002) or domain (<code class=\"language-text\">firstapp.com</code>/<code class=\"language-text\">secondapp.com</code>). The preceding controller routes are required in order to return weather data from the server app to the client apps.</p>\n</li>\n</ul>\n<h3>Static assets and class libraries</h3>\n<p>Use the following approaches for static assets:</p>\n<ul>\n<li>\n<p>When the asset is in the client app's <code class=\"language-text\">wwwroot</code> folder, provide their paths normally:</p>\n<div class=\"gatsby-highlight\" data-language=\"razor\"><pre class=\"language-razor\"><code class=\"language-razor\">&lt;img alt=&quot;...&quot; src=&quot;/{ASSET FILE NAME}&quot; /&gt;</code></pre></div>\n</li>\n<li>\n<p>When the asset is in the <code class=\"language-text\">wwwroot</code> folder of a <a href=\"xref:blazor/components/class-libraries\">Razor Class Library (RCL)</a>, reference the static asset in the client app per the guidance in the <a href=\"xref:razor-pages/ui-class#consume-content-from-a-referenced-rcl\">RCL article</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"razor\"><pre class=\"language-razor\"><code class=\"language-razor\">&lt;img alt=&quot;...&quot; src=&quot;_content/{LIBRARY NAME}/{ASSET FILE NAME}&quot; /&gt;</code></pre></div>\n</li>\n</ul>\n<!-- HOLD for reactivation at 5.x\n\n::: moniker range=\">= aspnetcore-5.0\"\n\nComponents provided to a client app by a class library are referenced normally. If any components require stylesheets or JavaScript files, use either of the following approaches to obtain the static assets:\n\n* The client app's `wwwroot/index.html` file can link (`<link>`) to the static assets.\n* The component can use the framework's [`Link` component](xref:blazor/fundamentals/signalr#influence-html-head-tag-elements) to obtain the static assets.\n\nThe preceding approaches are demonstrated in the following examples.\n\n::: moniker-end\n\n::: moniker range=\"< aspnetcore-5.0\"\n\n-->\n<p>Components provided to a client app by a class library are referenced normally. If any components require stylesheets or JavaScript files, the client app's <code class=\"language-text\">wwwroot/index.html</code> file must include the correct static asset links. These approaches are demonstrated in the following examples.</p>\n<!-- HOLD for reactivation at 5.x\n\n::: moniker-end\n\n-->\n<p>Add the following <code class=\"language-text\">Jeep</code> component to one of the client apps. The <code class=\"language-text\">Jeep</code> component uses:</p>\n<ul>\n<li>An image from the client app's <code class=\"language-text\">wwwroot</code> folder (<code class=\"language-text\">jeep-cj.png</code>).</li>\n<li>An image from an <a href=\"xref:blazor/components/class-libraries\">added Razor component library</a> (<code class=\"language-text\">JeepImage</code>) <code class=\"language-text\">wwwroot</code> folder (<code class=\"language-text\">jeep-yj.png</code>).</li>\n<li>The example component (<code class=\"language-text\">Component1</code>) is created automatically by the RCL project template when the <code class=\"language-text\">JeepImage</code> library is added to the solution.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"razor\"><pre class=\"language-razor\"><code class=\"language-razor\">@page &quot;/Jeep&quot;\n\n&lt;h1&gt;1979 Jeep CJ-5&amp;trade;&lt;/h1&gt;\n\n&lt;p&gt;\n    &lt;img alt=&quot;1979 Jeep CJ-5&amp;trade;&quot; src=&quot;/jeep-cj.png&quot; /&gt;\n&lt;/p&gt;\n\n&lt;h1&gt;1991 Jeep YJ&amp;trade;&lt;/h1&gt;\n\n&lt;p&gt;\n    &lt;img alt=&quot;1991 Jeep YJ&amp;trade;&quot; src=&quot;_content/JeepImage/jeep-yj.png&quot; /&gt;\n&lt;/p&gt;\n\n&lt;p&gt;\n    &lt;em&gt;Jeep CJ-5&lt;/em&gt; and &lt;em&gt;Jeep YJ&lt;/em&gt; are a trademarks of\n    &lt;a href=&quot;https://www.fcagroup.com&quot;&gt;Fiat Chrysler Automobiles&lt;/a&gt;.\n&lt;/p&gt;\n\n&lt;JeepImage.Component1 /&gt;</code></pre></div>\n<blockquote>\n<p>[!WARNING]\nDo <strong>not</strong> publish images of vehicles publicly unless you own the images. Otherwise, you risk copyright infringement.</p>\n</blockquote>\n<!-- HOLD for reactivation at 5.x\n\n::: moniker range=\">= aspnetcore-5.0\"\n\nThe library's `jeep-yj.png` image can also be added to the library's `Component1` component (`Component1.razor`). To provide the `my-component` CSS class to the client app's page, link to the library's stylesheet using the framework's [`Link` component](xref:blazor/fundamentals/signalr#influence-html-head-tag-elements):\n\n```razor\n<div class=\"my-component\">\n    <Link href=\"_content/JeepImage/styles.css\" rel=\"stylesheet\" />\n\n    <h1>JeepImage.Component1</h1>\n\n    <p>\n        This Blazor component is defined in the <strong>JeepImage</strong> package.\n    </p>\n\n    <p>\n        <img alt=\"1991 Jeep YJ&trade;\" src=\"_content/JeepImage/jeep-yj.png\" />\n    </p>\n</div>\n```\n\nAn alternative to using the [`Link` component](xref:blazor/fundamentals/signalr#influence-html-head-tag-elements) is to load the stylesheet from the client app's `wwwroot/index.html` file. This approach makes the stylesheet available to all of the components in the client app:\n\n```html\n<head>\n    ...\n    <link href=\"_content/JeepImage/styles.css\" rel=\"stylesheet\" />\n</head>\n```\n\n::: moniker-end\n\n::: moniker range=\"< aspnetcore-5.0\"\n\n-->\n<p>The library's <code class=\"language-text\">jeep-yj.png</code> image can also be added to the library's <code class=\"language-text\">Component1</code> component (<code class=\"language-text\">Component1.razor</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"razor\"><pre class=\"language-razor\"><code class=\"language-razor\">&lt;div class=&quot;my-component&quot;&gt;\n    &lt;h1&gt;JeepImage.Component1&lt;/h1&gt;\n\n    &lt;p&gt;\n        This Blazor component is defined in the &lt;strong&gt;JeepImage&lt;/strong&gt; package.\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;img alt=&quot;1991 Jeep YJ&amp;trade;&quot; src=&quot;_content/JeepImage/jeep-yj.png&quot; /&gt;\n    &lt;/p&gt;\n&lt;/div&gt;</code></pre></div>\n<p>The client app's <code class=\"language-text\">wwwroot/index.html</code> file requests the library's stylesheet with the following added <code class=\"language-text\">&lt;link&gt;</code> tag:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_content/JeepImage/styles.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<!-- HOLD for reactivation at 5.x\n\n::: moniker-end\n\n-->\n<p>Add navigation to the <code class=\"language-text\">Jeep</code> component in the client app's <code class=\"language-text\">NavMenu</code> component (<code class=\"language-text\">Shared/NavMenu.razor</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"razor\"><pre class=\"language-razor\"><code class=\"language-razor\">&lt;li class=&quot;nav-item px-3&quot;&gt;\n    &lt;NavLink class=&quot;nav-link&quot; href=&quot;Jeep&quot;&gt;\n        &lt;span class=&quot;oi oi-list-rich&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Jeep\n    &lt;/NavLink&gt;\n&lt;/li&gt;</code></pre></div>\n<p>For more information on RCLs, see:</p>\n<ul>\n<li>&#x3C;xref:blazor/components/class-libraries></li>\n<li>&#x3C;xref:razor-pages/ui-class></li>\n</ul>\n<h2>Standalone deployment</h2>\n<p>A <em>standalone deployment</em> serves the Blazor WebAssembly app as a set of static files that are requested directly by clients. Any static file server is able to serve the Blazor app.</p>\n<p>Standalone deployment assets are published into the <code class=\"language-text\">/bin/Release/{TARGET FRAMEWORK}/publish/wwwroot</code> folder.</p>\n<h3>Azure App Service</h3>\n<p>Blazor WebAssembly apps can be deployed to Azure App Services on Windows, which hosts the app on <a href=\"#iis\">IIS</a>.</p>\n<p>Deploying a standalone Blazor WebAssembly app to Azure App Service for Linux isn't currently supported. A Linux server image to host the app isn't available at this time. Work is in progress to enable this scenario.</p>\n<h3>IIS</h3>\n<p>IIS is a capable static file server for Blazor apps. To configure IIS to host Blazor, see <a href=\"/iis/manage/creating-websites/scenario-build-a-static-website-on-iis\">Build a Static Website on IIS</a>.</p>\n<p>Published assets are created in the <code class=\"language-text\">/bin/Release/{TARGET FRAMEWORK}/publish</code> folder. Host the contents of the <code class=\"language-text\">publish</code> folder on the web server or hosting service.</p>\n<h4>web.config</h4>\n<p>When a Blazor project is published, a <code class=\"language-text\">web.config</code> file is created with the following IIS configuration:</p>\n<ul>\n<li>\n<p>MIME types are set for the following file extensions:</p>\n<ul>\n<li><code class=\"language-text\">.dll</code>: <code class=\"language-text\">application/octet-stream</code></li>\n<li><code class=\"language-text\">.json</code>: <code class=\"language-text\">application/json</code></li>\n<li><code class=\"language-text\">.wasm</code>: <code class=\"language-text\">application/wasm</code></li>\n<li><code class=\"language-text\">.woff</code>: <code class=\"language-text\">application/font-woff</code></li>\n<li><code class=\"language-text\">.woff2</code>: <code class=\"language-text\">application/font-woff</code></li>\n</ul>\n</li>\n<li>\n<p>HTTP compression is enabled for the following MIME types:</p>\n<ul>\n<li><code class=\"language-text\">application/octet-stream</code></li>\n<li><code class=\"language-text\">application/wasm</code></li>\n</ul>\n</li>\n<li>\n<p>URL Rewrite Module rules are established:</p>\n<ul>\n<li>Serve the sub-directory where the app's static assets reside (<code class=\"language-text\">wwwroot/{PATH REQUESTED}</code>).</li>\n<li>Create SPA fallback routing so that requests for non-file assets are redirected to the app's default document in its static assets folder (<code class=\"language-text\">wwwroot/index.html</code>).</li>\n</ul>\n</li>\n</ul>\n<h4>Use a custom web.config</h4>\n<p>To use a custom <code class=\"language-text\">web.config</code> file, place the custom <code class=\"language-text\">web.config</code> file at the root of the project folder. Configure the project to publish IIS-specific assets using <code class=\"language-text\">PublishIISAssets</code> in the app's project file and publish the project:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PublishIISAssets</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PublishIISAssets</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4>Install the URL Rewrite Module</h4>\n<p>The <a href=\"https://www.iis.net/downloads/microsoft/url-rewrite\">URL Rewrite Module</a> is required to rewrite URLs. The module isn't installed by default, and it isn't available for install as a Web Server (IIS) role service feature. The module must be downloaded from the IIS website. Use the Web Platform Installer to install the module:</p>\n<ol>\n<li>Locally, navigate to the <a href=\"https://www.iis.net/downloads/microsoft/url-rewrite#additionalDownloads\">URL Rewrite Module downloads page</a>. For the English version, select <strong>WebPI</strong> to download the WebPI installer. For other languages, select the appropriate architecture for the server (x86/x64) to download the installer.</li>\n<li>Copy the installer to the server. Run the installer. Select the <strong>Install</strong> button and accept the license terms. A server restart isn't required after the install completes.</li>\n</ol>\n<h4>Configure the website</h4>\n<p>Set the website's <strong>Physical path</strong> to the app's folder. The folder contains:</p>\n<ul>\n<li>The <code class=\"language-text\">web.config</code> file that IIS uses to configure the website, including the required redirect rules and file content types.</li>\n<li>The app's static asset folder.</li>\n</ul>\n<h4>Host as an IIS sub-app</h4>\n<p>If a standalone app is hosted as an IIS sub-app, perform either of the following:</p>\n<ul>\n<li>\n<p>Disable the inherited ASP.NET Core Module handler.</p>\n<p>Remove the handler in the Blazor app's published <code class=\"language-text\">web.config</code> file by adding a <code class=\"language-text\">&lt;handlers&gt;</code> section to the file:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>handlers</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>remove</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>aspNetCore<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>handlers</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>\n<p>Disable inheritance of the root (parent) app's <code class=\"language-text\">&lt;system.webServer&gt;</code> section using a <code class=\"language-text\">&lt;location&gt;</code> element with <code class=\"language-text\">inheritInChildApplications</code> set to <code class=\"language-text\">false</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>location</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">inheritInChildApplications</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>system.webServer</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>handlers</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>aspNetCore<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>handlers</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aspNetCore</span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>system.webServer</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>location</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n</ul>\n<p>Removing the handler or disabling inheritance is performed in addition to <a href=\"xref:blazor/host-and-deploy/index#app-base-path\">configuring the app's base path</a>. Set the app base path in the app's <code class=\"language-text\">index.html</code> file to the IIS alias used when configuring the sub-app in IIS.</p>\n<h4>Brotli and Gzip compression</h4>\n<p><em>This section only applies to standalone Blazor WebAssembly apps. Hosted Blazor apps use a default ASP.NET Core app <code class=\"language-text\">web.config</code> file, not the file linked in this section.</em></p>\n<p>IIS can be configured via <code class=\"language-text\">web.config</code> to serve Brotli or Gzip compressed Blazor assets for standalone Blazor WebAssembly apps. For an example configuration file, see <a href=\"https://github.com/dotnet/AspNetCore.Docs/blob/master/aspnetcore/blazor/host-and-deploy/webassembly/_samples/web.config?raw=true\"><code class=\"language-text\">web.config</code></a>.</p>\n<p>Additional configuration of the example <code class=\"language-text\">web.config</code> file might be required in the following scenarios:</p>\n<ul>\n<li>\n<p>The app's specification calls for either of the following:</p>\n<ul>\n<li>Serving compressed files that aren't configured by the example <code class=\"language-text\">web.config</code> file.</li>\n<li>Serving compressed files configured by the example <code class=\"language-text\">web.config</code> file in an uncompressed format.</li>\n</ul>\n</li>\n<li>The server's IIS configuration (for example, <code class=\"language-text\">applicationHost.config</code>) provides server-level IIS defaults. Depending on the server-level configuration, the app might require a different IIS configuration than what the example <code class=\"language-text\">web.config</code> file contains.</li>\n</ul>\n<h4>Troubleshooting</h4>\n<p>If a <em>500 - Internal Server Error</em> is received and IIS Manager throws errors when attempting to access the website's configuration, confirm that the URL Rewrite Module is installed. When the module isn't installed, the <code class=\"language-text\">web.config</code> file can't be parsed by IIS. This prevents the IIS Manager from loading the website's configuration and the website from serving Blazor's static files.</p>\n<p>For more information on troubleshooting deployments to IIS, see &#x3C;xref:test/troubleshoot-azure-iis>.</p>\n<h3>Azure Storage</h3>\n<p><a href=\"/azure/storage/\">Azure Storage</a> static file hosting allows serverless Blazor app hosting. Custom domain names, the Azure Content Delivery Network (CDN), and HTTPS are supported.</p>\n<p>When the blob service is enabled for static website hosting on a storage account:</p>\n<ul>\n<li>Set the <strong>Index document name</strong> to <code class=\"language-text\">index.html</code>.</li>\n<li>Set the <strong>Error document path</strong> to <code class=\"language-text\">index.html</code>. Razor components and other non-file endpoints don't reside at physical paths in the static content stored by the blob service. When a request for one of these resources is received that the Blazor router should handle, the <em>404 - Not Found</em> error generated by the blob service routes the request to the <strong>Error document path</strong>. The <code class=\"language-text\">index.html</code> blob is returned, and the Blazor router loads and processes the path.</li>\n</ul>\n<p>If files aren't loaded at runtime due to inappropriate MIME types in the files' <code class=\"language-text\">Content-Type</code> headers, take either of the following actions:</p>\n<ul>\n<li>Configure your tooling to set the correct MIME types (<code class=\"language-text\">Content-Type</code> headers) when the files are deployed.</li>\n<li>\n<p>Change the MIME types (<code class=\"language-text\">Content-Type</code> headers) for the files after the app is deployed.</p>\n<p>In Storage Explorer (Azure portal) for each file:</p>\n<ol>\n<li>Right-click the file and select <strong>Properties</strong>.</li>\n<li>Set the <strong>ContentType</strong> and select the <strong>Save</strong> button.</li>\n</ol>\n</li>\n</ul>\n<p>For more information, see <a href=\"/azure/storage/blobs/storage-blob-static-website\">Static website hosting in Azure Storage</a>.</p>\n<h3>Nginx</h3>\n<p>The following <code class=\"language-text\">nginx.conf</code> file is simplified to show how to configure Nginx to send the <code class=\"language-text\">index.html</code> file whenever it can't find a corresponding file on disk.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">events { }\nhttp {\n    server {\n        listen 80;\n\n        location / {\n            root      /usr/share/nginx/html;\n            try_files $uri $uri/ /index.html =404;\n        }\n    }\n}</code></pre></div>\n<p>When setting the <a href=\"https://www.nginx.com/blog/rate-limiting-nginx/#bursts\">NGINX burst rate limit</a> with <a href=\"https://nginx.org/docs/http/ngx_http_limit_req_module.html#limit_req\"><code class=\"language-text\">limit_req</code></a>, Blazor WebAssembly apps may require a large <code class=\"language-text\">burst</code> parameter value to accommodate the relatively large number of requests made by an app. Initially, set the value to at least 60:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">http {\n    server {\n        ...\n\n        location / {\n            ...\n\n            limit_req zone=one burst=60 nodelay;\n        }\n    }\n}</code></pre></div>\n<p>Increase the value if browser developer tools or a network traffic tool indicates that requests are receiving a <em>503 - Service Unavailable</em> status code.</p>\n<p>For more information on production Nginx web server configuration, see <a href=\"https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/\">Creating NGINX Plus and NGINX Configuration Files</a>.</p>\n<h3>Apache</h3>\n<p>To deploy a Blazor WebAssembly app to CentOS 7 or later:</p>\n<ol>\n<li>\n<p>Create the Apache configuration file. The following example is a simplified configuration file (<code class=\"language-text\">blazorapp.config</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;VirtualHost *:80&gt;\n   ServerName www.example.com\n   ServerAlias *.example.com\n\n   DocumentRoot &quot;/var/www/blazorapp&quot;\n   ErrorDocument 404 /index.html\n\n   AddType application/wasm .wasm\n   AddType application/octet-stream .dll\n\n   &lt;Directory &quot;/var/www/blazorapp&quot;&gt;\n       Options -Indexes\n       AllowOverride None\n   &lt;/Directory&gt;\n\n   &lt;IfModule mod_deflate.c&gt;\n       AddOutputFilterByType DEFLATE text/css\n       AddOutputFilterByType DEFLATE application/javascript\n       AddOutputFilterByType DEFLATE text/html\n       AddOutputFilterByType DEFLATE application/octet-stream\n       AddOutputFilterByType DEFLATE application/wasm\n       &lt;IfModule mod_setenvif.c&gt;\n       BrowserMatch ^Mozilla/4 gzip-only-text/html\n       BrowserMatch ^Mozilla/4.0[678] no-gzip\n       BrowserMatch bMSIE !no-gzip !gzip-only-text/html\n   &lt;/IfModule&gt;\n   &lt;/IfModule&gt;\n\n   ErrorLog /var/log/httpd/blazorapp-error.log\n   CustomLog /var/log/httpd/blazorapp-access.log common\n&lt;/VirtualHost&gt;</code></pre></div>\n</li>\n<li>Place the Apache configuration file into the <code class=\"language-text\">/etc/httpd/conf.d/</code> directory, which is the default Apache configuration directory in CentOS 7.</li>\n<li>Place the app's files into the <code class=\"language-text\">/var/www/blazorapp</code> directory (the location specified to <code class=\"language-text\">DocumentRoot</code> in the configuration file).</li>\n<li>Restart the Apache service.</li>\n</ol>\n<p>For more information, see <a href=\"https://httpd.apache.org/docs/2.4/mod/mod_mime.html\"><code class=\"language-text\">mod_mime</code></a> and <a href=\"https://httpd.apache.org/docs/current/mod/mod_deflate.html\"><code class=\"language-text\">mod_deflate</code></a>.</p>\n<h3>GitHub Pages</h3>\n<p>To handle URL rewrites, add a <code class=\"language-text\">wwwroot/404.html</code> file with a script that handles redirecting the request to the <code class=\"language-text\">index.html</code> page. For an example, see the <a href=\"https://github.com/SteveSandersonMS/BlazorOnGitHubPages\">SteveSandersonMS/BlazorOnGitHubPages GitHub repository</a>:</p>\n<ul>\n<li><a href=\"https://github.com/SteveSandersonMS/BlazorOnGitHubPages/blob/master/wwwroot/404.html\"><code class=\"language-text\">wwwroot/404.html</code></a></li>\n<li><a href=\"https://stevesandersonms.github.io/BlazorOnGitHubPages/\">Live site</a>)</li>\n</ul>\n<p>When using a project site instead of an organization site, update the <code class=\"language-text\">&lt;base&gt;</code> tag in <code class=\"language-text\">wwwroot/index.html</code>. Set the <code class=\"language-text\">href</code> attribute value to the GitHub repository name with a trailing slash (for example, <code class=\"language-text\">/my-repository/</code>). In the <a href=\"https://github.com/SteveSandersonMS/BlazorOnGitHubPages\">SteveSandersonMS/BlazorOnGitHubPages GitHub repository</a>, the base <code class=\"language-text\">href</code> is updated at publish by the <a href=\"https://github.com/SteveSandersonMS/BlazorOnGitHubPages/blob/master/.github/workflows/main.yml\"><code class=\"language-text\">.github/workflows/main.yml</code> configuration file</a>.</p>\n<blockquote>\n<p>[!NOTE]\nThe <a href=\"https://github.com/SteveSandersonMS/BlazorOnGitHubPages\">SteveSandersonMS/BlazorOnGitHubPages GitHub repository</a> isn't owned, maintained, or supported by the .NET Foundation or Microsoft.</p>\n</blockquote>\n<h2>Host configuration values</h2>\n<p><a href=\"xref:blazor/hosting-models#blazor-webassembly\">Blazor WebAssembly apps</a> can accept the following host configuration values as command-line arguments at runtime in the development environment.</p>\n<h3>Content root</h3>\n<p>The <code class=\"language-text\">--contentroot</code> argument sets the absolute path to the directory that contains the app's content files (<a href=\"xref:fundamentals/index#content-root\">content root</a>). In the following examples, <code class=\"language-text\">/content-root-path</code> is the app's content root path.</p>\n<ul>\n<li>\n<p>Pass the argument when running the app locally at a command prompt. From the app's directory, execute:</p>\n<div class=\"gatsby-highlight\" data-language=\"dotnetcli\"><pre class=\"language-dotnetcli\"><code class=\"language-dotnetcli\">dotnet run --contentroot=/content-root-path</code></pre></div>\n</li>\n<li>\n<p>Add an entry to the app's <code class=\"language-text\">launchSettings.json</code> file in the <strong>IIS Express</strong> profile. This setting is used when the app is run with the Visual Studio Debugger and from a command prompt with <code class=\"language-text\">dotnet run</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"commandLineArgs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"--contentroot=/content-root-path\"</span></code></pre></div>\n</li>\n<li>\n<p>In Visual Studio, specify the argument in <strong>Properties</strong> > <strong>Debug</strong> > <strong>Application arguments</strong>. Setting the argument in the Visual Studio property page adds the argument to the <code class=\"language-text\">launchSettings.json</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">--contentroot=/content-root-path</code></pre></div>\n</li>\n</ul>\n<h3>Path base</h3>\n<p>The <code class=\"language-text\">--pathbase</code> argument sets the app base path for an app run locally with a non-root relative URL path (the <code class=\"language-text\">&lt;base&gt;</code> tag <code class=\"language-text\">href</code> is set to a path other than <code class=\"language-text\">/</code> for staging and production). In the following examples, <code class=\"language-text\">/relative-URL-path</code> is the app's path base. For more information, see <a href=\"xref:blazor/host-and-deploy/index#app-base-path\">App base path</a>.</p>\n<blockquote>\n<p>[!IMPORTANT]\nUnlike the path provided to <code class=\"language-text\">href</code> of the <code class=\"language-text\">&lt;base&gt;</code> tag, don't include a trailing slash (<code class=\"language-text\">/</code>) when passing the <code class=\"language-text\">--pathbase</code> argument value. If the app base path is provided in the <code class=\"language-text\">&lt;base&gt;</code> tag as <code class=\"language-text\">&lt;base href=&quot;/CoolApp/&quot;&gt;</code> (includes a trailing slash), pass the command-line argument value as <code class=\"language-text\">--pathbase=/CoolApp</code> (no trailing slash).</p>\n</blockquote>\n<ul>\n<li>\n<p>Pass the argument when running the app locally at a command prompt. From the app's directory, execute:</p>\n<div class=\"gatsby-highlight\" data-language=\"dotnetcli\"><pre class=\"language-dotnetcli\"><code class=\"language-dotnetcli\">dotnet run --pathbase=/relative-URL-path</code></pre></div>\n</li>\n<li>\n<p>Add an entry to the app's <code class=\"language-text\">launchSettings.json</code> file in the <strong>IIS Express</strong> profile. This setting is used when running the app with the Visual Studio Debugger and from a command prompt with <code class=\"language-text\">dotnet run</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"commandLineArgs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"--pathbase=/relative-URL-path\"</span></code></pre></div>\n</li>\n<li>\n<p>In Visual Studio, specify the argument in <strong>Properties</strong> > <strong>Debug</strong> > <strong>Application arguments</strong>. Setting the argument in the Visual Studio property page adds the argument to the <code class=\"language-text\">launchSettings.json</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">--pathbase=/relative-URL-path</code></pre></div>\n</li>\n</ul>\n<h3>URLs</h3>\n<p>The <code class=\"language-text\">--urls</code> argument sets the IP addresses or host addresses with ports and protocols to listen on for requests.</p>\n<ul>\n<li>\n<p>Pass the argument when running the app locally at a command prompt. From the app's directory, execute:</p>\n<div class=\"gatsby-highlight\" data-language=\"dotnetcli\"><pre class=\"language-dotnetcli\"><code class=\"language-dotnetcli\">dotnet run --urls=http://127.0.0.1:0</code></pre></div>\n</li>\n<li>\n<p>Add an entry to the app's <code class=\"language-text\">launchSettings.json</code> file in the <strong>IIS Express</strong> profile. This setting is used when running the app with the Visual Studio Debugger and from a command prompt with <code class=\"language-text\">dotnet run</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"commandLineArgs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"--urls=http://127.0.0.1:0\"</span></code></pre></div>\n</li>\n<li>\n<p>In Visual Studio, specify the argument in <strong>Properties</strong> > <strong>Debug</strong> > <strong>Application arguments</strong>. Setting the argument in the Visual Studio property page adds the argument to the <code class=\"language-text\">launchSettings.json</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">--urls=http://127.0.0.1:0</code></pre></div>\n</li>\n</ul>\n<p>::: moniker range=\">= aspnetcore-5.0\"</p>\n<h2>Configure the Trimmer</h2>\n<p>Blazor performs Intermediate Language (IL) trimming on each Release build to remove unnecessary IL from the output assemblies. For more information, see &#x3C;xref:blazor/host-and-deploy/configure-trimmer>.</p>\n<p>::: moniker-end</p>\n<p>::: moniker range=\"&#x3C; aspnetcore-5.0\"</p>\n<h2>Configure the Linker</h2>\n<p>Blazor performs Intermediate Language (IL) linking on each Release build to remove unnecessary IL from the output assemblies. For more information, see &#x3C;xref:blazor/host-and-deploy/configure-linker>.</p>\n<p>::: moniker-end</p>\n<h2>Custom boot resource loading</h2>\n<p>A Blazor WebAssembly app can be initialized with the <code class=\"language-text\">loadBootResource</code> function to override the built-in boot resource loading mechanism. Use <code class=\"language-text\">loadBootResource</code> for the following scenarios:</p>\n<ul>\n<li>Allow users to load static resources, such as timezone data or <code class=\"language-text\">dotnet.wasm</code> from a CDN.</li>\n<li>Load compressed assemblies using an HTTP request and decompress them on the client for hosts that don't support fetching compressed contents from the server.</li>\n<li>Alias resources to a different name by redirecting each <code class=\"language-text\">fetch</code> request to a new name.</li>\n</ul>\n<p><code class=\"language-text\">loadBootResource</code> parameters appear in the following table.</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">type</code></td>\n<td>The type of the resource. Permissable types: <code class=\"language-text\">assembly</code>, <code class=\"language-text\">pdb</code>, <code class=\"language-text\">dotnetjs</code>, <code class=\"language-text\">dotnetwasm</code>, <code class=\"language-text\">timezonedata</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">name</code></td>\n<td>The name of the resource.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">defaultUri</code></td>\n<td>The relative or absolute URI of the resource.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">integrity</code></td>\n<td>The integrity string representing the expected content in the response.</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">loadBootResource</code> returns any of the following to override the loading process:</p>\n<ul>\n<li>\n<p>URI string. In the following example (<code class=\"language-text\">wwwroot/index.html</code>), the following files are served from a CDN at <code class=\"language-text\">https://my-awesome-cdn.com/</code>:</p>\n<ul>\n<li><code class=\"language-text\">dotnet.*.js</code></li>\n<li><code class=\"language-text\">dotnet.wasm</code></li>\n<li>Timezone data</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">...\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_framework/blazor.webassembly.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autostart</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\nBlazor<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">loadBootResource</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> defaultUri<span class=\"token punctuation\">,</span> integrity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Loading: '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">', '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">', '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>defaultUri<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">', '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>integrity<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'dotnetjs'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'dotnetwasm'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'timezonedata'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://my-awesome-cdn.com/blazorwebassembly/3.2.0/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Promise&lt;Response&gt;</code>. Pass the <code class=\"language-text\">integrity</code> parameter in a header to retain the default integrity-checking behavior.</p>\n<p>The following example (<code class=\"language-text\">wwwroot/index.html</code>) adds a custom HTTP header to the outbound requests and passes the <code class=\"language-text\">integrity</code> parameter through to the <code class=\"language-text\">fetch</code> call:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_framework/blazor.webassembly.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autostart</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\nBlazor<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">loadBootResource</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> defaultUri<span class=\"token punctuation\">,</span> integrity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>defaultUri<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      cache<span class=\"token operator\">:</span> <span class=\"token string\">'no-cache'</span><span class=\"token punctuation\">,</span>\n      integrity<span class=\"token operator\">:</span> integrity<span class=\"token punctuation\">,</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'MyCustomHeader'</span><span class=\"token operator\">:</span> <span class=\"token string\">'My custom value'</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li><code class=\"language-text\">null</code>/<code class=\"language-text\">undefined</code>, which results in the default loading behavior.</li>\n</ul>\n<p>External sources must return the required CORS headers for browsers to allow the cross-origin resource loading. CDNs usually provide the required headers by default.</p>\n<p>You only need to specify types for custom behaviors. Types not specified to <code class=\"language-text\">loadBootResource</code> are loaded by the framework per their default loading behaviors.</p>\n<h2>Change the filename extension of DLL files</h2>\n<p>In case you have a need to change the filename extensions of the app's published <code class=\"language-text\">.dll</code> files, follow the guidance in this section.</p>\n<p>After publishing the app, use a shell script or DevOps build pipeline to rename <code class=\"language-text\">.dll</code> files to use a different file extension. Target the <code class=\"language-text\">.dll</code> files in the <code class=\"language-text\">wwwroot</code> directory of the app's published output (for example, <code class=\"language-text\">{CONTENT ROOT}/bin/Release/netstandard2.1/publish/wwwroot</code>).</p>\n<p>In the following examples, <code class=\"language-text\">.dll</code> files are renamed to use the <code class=\"language-text\">.bin</code> file extension.</p>\n<p>On Windows:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">dir</span> <span class=\"token punctuation\">.</span>\\_framework\\_bin <span class=\"token punctuation\">|</span> <span class=\"token function\">rename-item</span> <span class=\"token operator\">-</span>NewName <span class=\"token punctuation\">{</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">-replace</span> <span class=\"token string\">\".dll\\b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\".bin\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">Get-Content</span> <span class=\"token punctuation\">.</span>\\_framework\\blazor<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>json <span class=\"token operator\">-</span>Raw<span class=\"token punctuation\">)</span> <span class=\"token operator\">-replace</span> <span class=\"token string\">'.dll\"'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'.bin\"'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Set-Content</span> <span class=\"token punctuation\">.</span>\\_framework\\blazor<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>json</code></pre></div>\n<p>If service worker assets are also in use, add the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">Get-Content</span> <span class=\"token punctuation\">.</span>\\service<span class=\"token operator\">-</span>worker<span class=\"token operator\">-</span>assets<span class=\"token punctuation\">.</span>js <span class=\"token operator\">-</span>Raw<span class=\"token punctuation\">)</span> <span class=\"token operator\">-replace</span> <span class=\"token string\">'.dll\"'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'.bin\"'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Set-Content</span> <span class=\"token punctuation\">.</span>\\service<span class=\"token operator\">-</span>worker<span class=\"token operator\">-</span>assets<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>On Linux or macOS:</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">for f in _framework/_bin/*; do mv &quot;$f&quot; &quot;`echo $f | sed -e &#39;s/\\.dll/.bin/g&#39;`&quot;; done\nsed -i &#39;s/\\.dll&quot;/.bin&quot;/g&#39; _framework/blazor.boot.json</code></pre></div>\n<p>If service worker assets are also in use, add the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">sed -i &#39;s/\\.dll&quot;/.bin&quot;/g&#39; service-worker-assets.js</code></pre></div>\n<p>To use a different file extension than <code class=\"language-text\">.bin</code>, replace <code class=\"language-text\">.bin</code> in the preceding commands.</p>\n<p>To address the compressed <code class=\"language-text\">blazor.boot.json.gz</code> and <code class=\"language-text\">blazor.boot.json.br</code> files, adopt either of the following approaches:</p>\n<ul>\n<li>Remove the compressed <code class=\"language-text\">blazor.boot.json.gz</code> and <code class=\"language-text\">blazor.boot.json.br</code> files. Compression is disabled with this approach.</li>\n<li>Recompress the updated <code class=\"language-text\">blazor.boot.json</code> file.</li>\n</ul>\n<p>The preceding guidance also applies when service worker assets are in use. Remove or recompress <code class=\"language-text\">wwwroot/service-worker-assets.js.br</code> and <code class=\"language-text\">wwwroot/service-worker-assets.js.gz</code>. Otherwise, file integrity checks fail in the browser.</p>\n<p>The following Windows example uses a PowerShell script placed at the root of the project.</p>\n<p><code class=\"language-text\">ChangeDLLExtensions.ps1:</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">param</span><span class=\"token punctuation\">(</span><span class=\"token namespace\">[string]</span><span class=\"token variable\">$filepath</span><span class=\"token punctuation\">,</span><span class=\"token namespace\">[string]</span><span class=\"token variable\">$tfm</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">dir</span> <span class=\"token variable\">$filepath</span>\\bin\\Release\\<span class=\"token variable\">$tfm</span>\\wwwroot\\_framework\\_bin <span class=\"token punctuation\">|</span> <span class=\"token function\">rename-item</span> <span class=\"token operator\">-</span>NewName <span class=\"token punctuation\">{</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">-replace</span> <span class=\"token string\">\".dll\\b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\".bin\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">Get-Content</span> <span class=\"token variable\">$filepath</span>\\bin\\Release\\<span class=\"token variable\">$tfm</span>\\wwwroot\\_framework\\blazor<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>json <span class=\"token operator\">-</span>Raw<span class=\"token punctuation\">)</span> <span class=\"token operator\">-replace</span> <span class=\"token string\">'.dll\"'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'.bin\"'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Set-Content</span> <span class=\"token variable\">$filepath</span>\\bin\\Release\\<span class=\"token variable\">$tfm</span>\\wwwroot\\_framework\\blazor<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>json\n<span class=\"token function\">Remove-Item</span> <span class=\"token variable\">$filepath</span>\\bin\\Release\\<span class=\"token variable\">$tfm</span>\\wwwroot\\_framework\\blazor<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>gz</code></pre></div>\n<p>If service worker assets are also in use, add the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">Get-Content</span> <span class=\"token variable\">$filepath</span>\\bin\\Release\\<span class=\"token variable\">$tfm</span>\\wwwroot\\service<span class=\"token operator\">-</span>worker<span class=\"token operator\">-</span>assets<span class=\"token punctuation\">.</span>js <span class=\"token operator\">-</span>Raw<span class=\"token punctuation\">)</span> <span class=\"token operator\">-replace</span> <span class=\"token string\">'.dll\"'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'.bin\"'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Set-Content</span> <span class=\"token variable\">$filepath</span>\\bin\\Release\\<span class=\"token variable\">$tfm</span>\\wwwroot\\service<span class=\"token operator\">-</span>worker<span class=\"token operator\">-</span>assets<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>In the project file, the script is run after publishing the app:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ChangeDLLFileExtensions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">AfterTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Publish<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>$(Configuration)<span class=\"token punctuation\">'</span>==<span class=\"token punctuation\">'</span>Release<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Exec</span> <span class=\"token attr-name\">Command</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>powershell.exe -command <span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span><span class=\"token entity named-entity\" title=\"&amp;\">&amp;amp;</span> { .\\ChangeDLLExtensions.ps1 <span class=\"token punctuation\">'</span>$(SolutionDir)<span class=\"token punctuation\">'</span> <span class=\"token punctuation\">'</span>$(TargetFramework)<span class=\"token punctuation\">'</span>}<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<blockquote>\n<p>[!NOTE]\nWhen renaming and lazy loading the same assemblies, see the guidance in &#x3C;xref:blazor/webassembly-lazy-load-assemblies#onnavigateasync-events-and-renamed-assembly-files>.</p>\n</blockquote>\n<h2>Resolve integrity check failures</h2>\n<p>When Blazor WebAssembly downloads an app's startup files, it instructs the browser to perform integrity checks on the responses. It uses information in the <code class=\"language-text\">blazor.boot.json</code> file to specify the expected SHA-256 hash values for <code class=\"language-text\">.dll</code>, <code class=\"language-text\">.wasm</code>, and other files. This is beneficial for the following reasons:</p>\n<ul>\n<li>It ensures you don't risk loading an inconsistent set of files, for example if a new deployment is applied to your web server while the user is in the process of downloading the application files. Inconsistent files could lead to undefined behavior.</li>\n<li>It ensures the user's browser never caches inconsistent or invalid responses, which could prevent them from starting the app even if they manually refresh the page.</li>\n<li>It makes it safe to cache the responses and not even check for server-side changes until the expected SHA-256 hashes themselves change, so subsequent page loads involve fewer requests and complete much faster.</li>\n</ul>\n<p>If your web server returns responses that don't match the expected SHA-256 hashes, you will see an error similar to the following appear in the browser's developer console:</p>\n<blockquote>\n<p>Failed to find a valid digest in the 'integrity' attribute for resource '<a href=\"https://myapp.example.com/%5C_framework/MyBlazorApp.dll\">https://myapp.example.com/\\_framework/MyBlazorApp.dll</a>' with computed SHA-256 integrity 'IIa70iwvmEg5WiDV17OpQ5eCztNYqL186J56852RpJY='. The resource has been blocked.</p>\n</blockquote>\n<p>In most cases, this is <em>not</em> a problem with integrity checking itself. Instead, it means there is some other problem, and the integrity check is warning you about that other problem.</p>\n<h3>Diagnosing integrity problems</h3>\n<p>When an app is built, the generated <code class=\"language-text\">blazor.boot.json</code> manifest describes the SHA-256 hashes of your boot resources (for example, <code class=\"language-text\">.dll</code>, <code class=\"language-text\">.wasm</code>, and other files) at the time that the build output is produced. The integrity check passes as long as the SHA-256 hashes in <code class=\"language-text\">blazor.boot.json</code> match the files delivered to the browser.</p>\n<p>Common reasons why this fails are:</p>\n<ul>\n<li>The web server's response is an error (for example, a <em>404 - Not Found</em> or a <em>500 - Internal Server Error</em>) instead of the file the browser requested. This is reported by the browser as an integrity check failure and not as a response failure.</li>\n<li>\n<p>Something has changed the contents of the files between the build and delivery of the files to the browser. This might happen:</p>\n<ul>\n<li>If you or build tools manually modify the build output.</li>\n<li>If some aspect of the deployment process modified the files. For example if you use a Git-based deployment mechanism, bear in mind that Git transparently converts Windows-style line endings to Unix-style line endings if you commit files on Windows and check them out on Linux. Changing file line endings change the SHA-256 hashes. To avoid this problem, consider <a href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes\">using <code class=\"language-text\">.gitattributes</code> to treat build artifacts as <code class=\"language-text\">binary</code> files</a>.</li>\n<li>The web server modifies the file contents as part of serving them. For example, some content distribution networks (CDNs) automatically attempt to <a href=\"xref:client-side/bundling-and-minification#minification\">minify</a> HTML, thereby modifying it. You may need to disable such features.</li>\n</ul>\n</li>\n</ul>\n<p>To diagnose which of these applies in your case:</p>\n<ol>\n<li>Note which file is triggering the error by reading the error message.</li>\n<li>Open your browser's developer tools and look in the <em>Network</em> tab. If necessary, reload the page to see the list of requests and responses. Find the file that is triggering the error in that list.</li>\n<li>Check the HTTP status code in the response. If the server returns anything other than <em>200 - OK</em> (or another 2xx status code), then you have a server-side problem to diagnose. For example, status code 403 means there's an authorization problem, whereas status code 500 means the server is failing in an unspecified manner. Consult server-side logs to diagnose and fix the app.</li>\n<li>If the status code is <em>200 - OK</em> for the resource, look at the response content in browser's developer tools and check that the content matches up with the data expected. For example, a common problem is to misconfigure routing so that requests return your <code class=\"language-text\">index.html</code> data even for other files. Make sure that responses to <code class=\"language-text\">.wasm</code> requests are WebAssembly binaries and that responses to <code class=\"language-text\">.dll</code> requests are .NET assembly binaries. If not, you have a server-side routing problem to diagnose.</li>\n<li>Seek to validate the app's published and deployed output with the <a href=\"#troubleshoot-integrity-powershell-script\">Troubleshoot integrity PowerShell script</a>.</li>\n</ol>\n<p>If you confirm that the server is returning plausibly correct data, there must be something else modifying the contents in between build and delivery of the file. To investigate this:</p>\n<ul>\n<li>Examine the build toolchain and deployment mechanism in case they're modifying files after the files are built. An example of this is when Git transforms file line endings, as described earlier.</li>\n<li>Examine the web server or CDN configuration in case they're set up to modify responses dynamically (for example, trying to minify HTML). It's fine for the web server to implement HTTP compression (for example, returning <code class=\"language-text\">content-encoding: br</code> or <code class=\"language-text\">content-encoding: gzip</code>), since this doesn't affect the result after decompression. However, it's <em>not</em> fine for the web server to modify the uncompressed data.</li>\n</ul>\n<h3>Troubleshoot integrity PowerShell script</h3>\n<p>Use the <a href=\"https://github.com/dotnet/AspNetCore.Docs/blob/master/aspnetcore/blazor/host-and-deploy/webassembly/_samples/integrity.ps1?raw=true\"><code class=\"language-text\">integrity.ps1</code></a> PowerShell script to validate a published and deployed Blazor app. The script is provided as a starting point when the app has integrity issues that the Blazor framework can't identify. Customization of the script might be required for your apps.</p>\n<p>The script checks the files in the <code class=\"language-text\">publish</code> folder and downloaded from the deployed app to detect issues in the different manifests that contain integrity hashes. These checks should detect the most common problems:</p>\n<ul>\n<li>You modified a file in the published output without realizing it.</li>\n<li>The app wasn't correctly deployed to the deployment target, or something changed within the deployment target's environment.</li>\n<li>There are differences between the deployed app and the output from publishing the app.</li>\n</ul>\n<p>Invoke the script with the following command in a PowerShell command shell:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token punctuation\">.</span>\\integrity<span class=\"token punctuation\">.</span>ps1 <span class=\"token punctuation\">{</span>BASE URL<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>PUBLISH OUTPUT FOLDER<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Placeholders:</p>\n<ul>\n<li><code class=\"language-text\">{BASE URL}</code>: The URL of the deployed app.</li>\n<li><code class=\"language-text\">{PUBLISH OUTPUT FOLDER}</code>: The path to the app's <code class=\"language-text\">publish</code> folder or location where the app is published for deployment.</li>\n</ul>\n<blockquote>\n<p>[!NOTE]\nTo clone the <code class=\"language-text\">dotnet/AspNetCore.Docs</code> GitHub repository to a system that uses the <a href=\"https://www.bitdefender.com\">Bitdefender</a> virus scanner, add an exception to Bitdefender for the <code class=\"language-text\">integrity.ps1</code> script. Add the exception to Bitdefender before cloning the repo to avoid having the script quarantined by the virus scanner. The following example is a typical path to the script for the cloned repo on a Windows system. Adjust the path as needed. The placeholder <code class=\"language-text\">{USER}</code> is the user's path segment.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">C:\\Users\\{USER}\\Documents\\GitHub\\AspNetCore.Docs\\aspnetcore\\blazor\\host-and-deploy\\webassembly\\_samples\\integrity.ps1</code></pre></div>\n</blockquote>\n<h3>Disable integrity checking for non-PWA apps</h3>\n<p>In most cases, don't disable integrity checking. Disabling integrity checking doesn't solve the underlying problem that has caused the unexpected responses and results in losing the benefits listed earlier.</p>\n<p>There may be cases where the web server can't be relied upon to return consistent responses, and you have no choice but to disable integrity checks. To disable integrity checks, add the following to a property group in the Blazor WebAssembly project's <code class=\"language-text\">.csproj</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BlazorCacheBootResources</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>BlazorCacheBootResources</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">BlazorCacheBootResources</code> also disables Blazor's default behavior of caching the <code class=\"language-text\">.dll</code>, <code class=\"language-text\">.wasm</code>, and other files based on their SHA-256 hashes because the property indicates that the SHA-256 hashes can't be relied upon for correctness. Even with this setting, the browser's normal HTTP cache may still cache those files, but whether or not this happens depends on your web server configuration and the <code class=\"language-text\">cache-control</code> headers that it serves.</p>\n<blockquote>\n<p>[!NOTE]\nThe <code class=\"language-text\">BlazorCacheBootResources</code> property doesn't disable integrity checks for <a href=\"xref:blazor/progressive-web-app\">Progressive Web Applications (PWAs)</a>. For guidance pertaining to PWAs, see the <a href=\"#disable-integrity-checking-for-pwas\">Disable integrity checking for PWAs</a> section.</p>\n</blockquote>\n<h3>Disable integrity checking for PWAs</h3>\n<p>Blazor's Progressive Web Application (PWA) template contains a suggested <code class=\"language-text\">service-worker.published.js</code> file that's responsible for fetching and storing application files for offline use. This is a separate process from the normal app startup mechanism and has its own separate integrity checking logic.</p>\n<p>Inside the <code class=\"language-text\">service-worker.published.js</code> file, following line is present:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">asset</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span>asset<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> integrity<span class=\"token operator\">:</span> asset<span class=\"token punctuation\">.</span>hash <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To disable integrity checking, remove the <code class=\"language-text\">integrity</code> parameter by changing the line to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">asset</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span>asset<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Again, disabling integrity checking means that you lose the safety guarantees offered by integrity checking. For example, there is a risk that if the user's browser is caching the app at the exact moment that you deploy a new version, it could cache some files from the old deployment and some from the new deployment. If that happens, the app becomes stuck in a broken state until you deploy a further update.</p>","frontmatter":{"title":"Host and deploy ASP.NET Core Blazor WebAssembly","date":null,"tags":null,"img":null}}},"pageContext":{"slug":"/webassembly/webassembly/","previous":{"fields":{"slug":"/esp32/subjectdistance/"},"frontmatter":{"title":"","tags":null,"img":null}},"next":{"fields":{"slug":"/welcome-to-gatsby/HugoNotes/"},"frontmatter":{"title":"","tags":null,"img":null}}}},"staticQueryHashes":["2478211480","63159454"]}